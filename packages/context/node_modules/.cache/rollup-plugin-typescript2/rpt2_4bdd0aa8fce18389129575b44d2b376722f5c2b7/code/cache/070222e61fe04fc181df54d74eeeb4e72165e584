{"code":"import { createState, runUntracked } from \"../../atom\";\r\nexport class SymbolTable {\r\n    symbols;\r\n    constructor() {\r\n        this.symbols = [new Map()];\r\n    }\r\n    fork() {\r\n        const child = new SymbolTable();\r\n        child.symbols.length = 0;\r\n        child.symbols.push(...this.symbols, new Map());\r\n        return child;\r\n    }\r\n    set(key, value) {\r\n        if (this.symbols[this.symbols.length - 1].has(key)) {\r\n            runUntracked(() => this.symbols[this.symbols.length - 1].get(key)?.set(value));\r\n        }\r\n        else {\r\n            this.symbols[this.symbols.length - 1].set(key, createState(value));\r\n        }\r\n    }\r\n    get(key) {\r\n        for (let i = this.symbols.length - 1; i >= 0; --i) {\r\n            if (this.symbols[i].has(key)) {\r\n                return this.symbols[i].get(key)?.get();\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class ExecutionScopeManager {\r\n    currentScope = new SymbolTable();\r\n    getCurrentScope() {\r\n        return this.currentScope;\r\n    }\r\n    /**\r\n     * Decorates the provided function such that it runs in a child scope of the current scope at the time\r\n     * of execution.\r\n     *\r\n     * @param fn The function to be decorated\r\n     */\r\n    withChildScope(fn) {\r\n        return (...args) => {\r\n            const parentScope = this.currentScope;\r\n            // At first sight it might seem unintuitive / stupid that we are forking instead of pushing a new scope, however\r\n            // in order to make provide calls made inside callbacks that execute after a builder has returned work as\r\n            // you would expect, we need to fork and never pop. This allows for the same 'scoped' behaviour, but also\r\n            // allows callbacks to work intuitively.\r\n            this.currentScope = this.currentScope.fork();\r\n            try {\r\n                return fn(...args);\r\n            }\r\n            finally {\r\n                this.currentScope = parentScope;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Decorates the provided function such that whenever the returned function is called, it executes the provided\r\n     * function with the current scope at the time this function is called - i.e. it forms a closure over the current\r\n     * scope at the time it is decorated.\r\n     *\r\n     * @param fn The function to be decorated.\r\n     */\r\n    withCurrentScope(fn) {\r\n        const capturedScope = this.currentScope.fork();\r\n        return (...args) => {\r\n            const currentScope = this.currentScope;\r\n            this.currentScope = capturedScope;\r\n            try {\r\n                return fn(...args);\r\n            }\r\n            finally {\r\n                this.currentScope = currentScope;\r\n            }\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=inject.js.map","references":["/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/index.ts","/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/index.ts"],"map":"{\"version\":3,\"file\":\"inject.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../lib/inject.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAQvD,MAAM,OAAO,WAAW;IACL,OAAO,CAAgC;IAExD;QACE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAC7B,CAAC;IAEM,IAAI;QACT,MAAM,KAAK,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACzB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,GAAG,CAAI,GAAiB,EAAE,KAAQ;QACvC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAClD,YAAY,CAAC,GAAG,EAAE,CAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAC3D,CAAC;SACH;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;SACpE;IACH,CAAC;IAEM,GAAG,CAAI,GAAiB;QAC7B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;YACjD,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC;aACxC;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAED,MAAM,OAAO,qBAAqB;IACxB,YAAY,GAAgB,IAAI,WAAW,EAAE,CAAC;IAE/C,eAAe;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,cAAc,CACnB,EAAsC;QAEtC,OAAO,CAAC,GAAG,IAAe,EAAc,EAAE;YACxC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;YAEtC,gHAAgH;YAChH,yGAAyG;YACzG,yGAAyG;YACzG,wCAAwC;YACxC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAE7C,IAAI;gBACF,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;aACpB;oBAAS;gBACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;aACjC;QACH,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,gBAAgB,CACrB,EAAsC;QAEtC,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC/C,OAAO,CAAC,GAAG,IAAe,EAAc,EAAE;YACxC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;YAClC,IAAI;gBACF,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;aACpB;oBAAS;gBACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;aAClC;QACH,CAAC,CAAC;IACJ,CAAC;CACF\"}","dtsmap":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/context/node_modules/.cache/rollup-plugin-typescript2/placeholder/packages/context/lib/inject.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"inject.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../lib/inject.ts\"],\"names\":[],\"mappings\":\"AAGA;;GAEG;AACH,MAAM,WAAW,SAAS,CAAC,CAAC,CAAE,SAAQ,MAAM;CAAG;AAE/C,qBAAa,WAAW;IACtB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAgC;;IAMjD,IAAI,IAAI,WAAW;IAOnB,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,IAAI;IAUzC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS;CAShD;AAED,qBAAa,qBAAqB;IAChC,OAAO,CAAC,YAAY,CAAkC;IAE/C,eAAe,IAAI,WAAW;IAIrC;;;;;OAKG;IACI,cAAc,CAAC,IAAI,SAAS,OAAO,EAAE,EAAE,UAAU,EACtD,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,UAAU,wBAET,UAAU;IAiBzC;;;;;;OAMG;IACI,gBAAgB,CAAC,IAAI,SAAS,OAAO,EAAE,EAAE,UAAU,EACxD,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,UAAU,wBAGT,UAAU;CAU1C\"}"},"dts":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/context/node_modules/.cache/rollup-plugin-typescript2/placeholder/packages/context/lib/inject.d.ts","writeByteOrderMark":false,"text":"/**\r\n * A typesafe key for a symbol in the symbol table.\r\n */\r\nexport interface SymbolKey<T> extends Symbol {\r\n}\r\nexport declare class SymbolTable {\r\n    private readonly symbols;\r\n    constructor();\r\n    fork(): SymbolTable;\r\n    set<T>(key: SymbolKey<T>, value: T): void;\r\n    get<T>(key: SymbolKey<T>): T | undefined;\r\n}\r\nexport declare class ExecutionScopeManager {\r\n    private currentScope;\r\n    getCurrentScope(): SymbolTable;\r\n    /**\r\n     * Decorates the provided function such that it runs in a child scope of the current scope at the time\r\n     * of execution.\r\n     *\r\n     * @param fn The function to be decorated\r\n     */\r\n    withChildScope<Args extends unknown[], ReturnType>(fn: (...args: [...Args]) => ReturnType): (...args_0: Args) => ReturnType;\r\n    /**\r\n     * Decorates the provided function such that whenever the returned function is called, it executes the provided\r\n     * function with the current scope at the time this function is called - i.e. it forms a closure over the current\r\n     * scope at the time it is decorated.\r\n     *\r\n     * @param fn The function to be decorated.\r\n     */\r\n    withCurrentScope<Args extends unknown[], ReturnType>(fn: (...args: [...Args]) => ReturnType): (...args_0: Args) => ReturnType;\r\n}\r\n//# sourceMappingURL=inject.d.ts.map"}}
