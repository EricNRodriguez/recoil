{"code":"import { MutableAtom, DerivedAtom, SideEffect, VirtualDerivedAtom, } from \"./atom\";\r\nimport { AtomTrackingContext } from \"./context\";\r\nimport { BatchingEffectScheduler } from \"./effect_scheduler\";\r\n/**\r\n * A shared tracking context for all atoms created through this api\r\n */\r\nconst globalTrackingContext = new AtomTrackingContext();\r\n/**\r\n * A shared side effect scheduler that provides support for batching updates\r\n */\r\nconst globalEffectScheduler = new BatchingEffectScheduler();\r\n/**\r\n * A utility class that provides runtime decoration to exported functions, implemented as a singleton.\r\n */\r\nclass ApiFunctionBuilder {\r\n    decoratorRegistry = new Map();\r\n    baseFuncRegistry = new Map();\r\n    /**\r\n     * A higher order method that provides runtime decoration support to the injected function\r\n     *\r\n     * @param baseFunc The function wrapped by the return function\r\n     * @returns A wrapper function around the injected function, which may be further decorated at runtime.\r\n     */\r\n    build(baseFunc) {\r\n        const externalFunc = ((...args) => {\r\n            return this.composeFunction(externalFunc)(...args);\r\n        });\r\n        this.decoratorRegistry.set(externalFunc, []);\r\n        this.baseFuncRegistry.set(externalFunc, baseFunc);\r\n        return externalFunc;\r\n    }\r\n    /**\r\n     * Registers runtime decorators for methods constructed by the build method\r\n     *\r\n     * @param apiFn The method _returned_ by the build method (not the injected function!)\r\n     * @param decorator The higher order function to wrap the apiFn\r\n     */\r\n    registerDecorator(apiFn, decorator) {\r\n        if (!this.decoratorRegistry.has(apiFn)) {\r\n            // TODO(ericr): more specific error type\r\n            throw new Error(\"decorating the provided function is not supported\");\r\n        }\r\n        this.decoratorRegistry.get(apiFn).push(decorator);\r\n    }\r\n    /**\r\n     * Unregisters any runtime decorators injected via the registerDecorator method\r\n     *\r\n     * @param apiFn The method _returned_ by the build method (not the injected function!)\r\n     * @param decorator The higher order decorator that is to be removed\r\n     */\r\n    deregisterDecorator(apiFn, decorator) {\r\n        this.decoratorRegistry.set(apiFn, (this.decoratorRegistry.get(apiFn) ?? []).filter((dec) => dec !== decorator));\r\n    }\r\n    /**\r\n     * Takes the external function and applies all registered decorators in FIFO order of registration, returning\r\n     * the decorated function. This is done lazily at runtime to enable runtime decoration.\r\n     *\r\n     * @param externalFunc The method _returned_ by the build method\r\n     * @returns The composed function, being the registered base function with all of the currently registered decorators\r\n     *          applied.\r\n     */\r\n    composeFunction(externalFunc) {\r\n        if (!this.baseFuncRegistry.has(externalFunc)) {\r\n            // TODO(ericr): more specific message and type\r\n            throw new Error(\"unable to compose unknown function\");\r\n        }\r\n        const baseFunc = this.baseFuncRegistry.get(externalFunc);\r\n        const decorations = this.decoratorRegistry.get(externalFunc);\r\n        return decorations.reduceRight((composedFunc, decorator) => decorator(composedFunc), baseFunc);\r\n    }\r\n}\r\nconst apiFunctionBuilder = new ApiFunctionBuilder();\r\n/**\r\n * Registers a runtime decorator against one of the public factory methods exposed by this module.\r\n *\r\n * @param apiFn The exposed function\r\n * @param decorator The higher order decorator to be applied for all subsequent calls of the apiFn\r\n */\r\nexport const registerDecorator = (apiFn, decorator) => {\r\n    return apiFunctionBuilder.registerDecorator(apiFn, decorator);\r\n};\r\n/**\r\n * De-registers decorators that have been applied to the provided apiFn (i.e. createState etc)\r\n *\r\n * @param apiFn The exposed function\r\n * @param decorator The higher order decorator to be removed\r\n */\r\nexport const deregisterDecorator = (apiFn, decorator) => {\r\n    return apiFunctionBuilder.deregisterDecorator(apiFn, decorator);\r\n};\r\n// TODO(ericr): Support aborting\r\n/**\r\n * A lightweight primitive that allows state to be fetched asynchronously and written to a reactive atom. Before\r\n * resolving, the returned atom will have an undefined value.\r\n *\r\n * @param producer A synchronous builder for an asynchronous value. It is important that all dependencies that invalidate\r\n *                 the returned state are read synchronously (i.e. before any async execution). You should think of this\r\n *                 as a synchronous factory that produces a promise, with this factory being re-run every time its dependencies\r\n *                 change.\r\n * @returns A maybe atom containing the fetched state (or undefined in the instance when the state is being fetched)\r\n */\r\nexport const fetchState = apiFunctionBuilder.build((producer) => {\r\n    let reactionVersion = 0;\r\n    let writeVersion = 0;\r\n    const atom = new MutableAtom(undefined, globalTrackingContext);\r\n    const sideEffectRunnable = () => {\r\n        let currentReactionVersion = reactionVersion++;\r\n        producer().then((val) => {\r\n            if (val === undefined) {\r\n                return;\r\n            }\r\n            if (writeVersion > currentReactionVersion) {\r\n                return;\r\n            }\r\n            atom.set(val);\r\n            writeVersion = currentReactionVersion;\r\n        });\r\n    };\r\n    const ref = new SideEffect(sideEffectRunnable, globalTrackingContext, globalEffectScheduler);\r\n    ref.run();\r\n    atom.$$$recoilFetchStateDerivation = ref;\r\n    return atom;\r\n});\r\n/**\r\n * A factory method for a mutable atom instance.\r\n *\r\n * @param value The value to be stored in the atom.\r\n * @returns The atom\r\n */\r\nexport const createState = apiFunctionBuilder.build((value) => {\r\n    return new MutableAtom(value, globalTrackingContext);\r\n});\r\n/**\r\n * A factory method for a derived state.\r\n *\r\n * The returned atom is dirtied whenever any atomic dependencies used within the\r\n * derivation are dirtied. Evaluation can either be lazy or eager, depending on\r\n * the effects registered against it.\r\n *\r\n * Which computations to wrap in cached derivations should be considered carefully, ideally through profiling. This\r\n * is because all writes to mutable atoms have a linear time complexity on the depth of the dependency DAG. Hence,\r\n * they should be used as tracked cache (memoization) primitive.\r\n *\r\n * @param deriveValue A synchronous factory for the state\r\n * @param cache Determines if the returned Atom is a skip connection in the DAG or an actual node.\r\n * @returns An atom containing the derived state, which automatically tracks the dependencies that were used to\r\n *          create it\r\n */\r\nexport const deriveState = apiFunctionBuilder.build((deriveValue, cache = true) => {\r\n    if (cache) {\r\n        return new DerivedAtom(deriveValue, globalTrackingContext);\r\n    }\r\n    else {\r\n        return new VirtualDerivedAtom(globalTrackingContext, deriveValue);\r\n    }\r\n});\r\n/**\r\n * A factory method for a tracked side effect\r\n *\r\n * The effect will be eagerly run once, and again any time any of its dependencies become dirty.\r\n *\r\n * It is important that this side effect is state-free, i.e. writes to atoms should be done with extreme\r\n * caution, as they can easily create reactive loops that are extremely difficult to find.\r\n *\r\n * As this is effectively a leaf in the dependency DAG, a reference to the side effect is returned that\r\n * should be managed by the caller. It provides lifecycle methods for the effect and also ensures that the\r\n * effect is not garbage collected. Despite this, it is recommended that this function should be decorated with\r\n * auto-scoping logic that handles reference management instead of doing it ad-hoc.\r\n *\r\n * @param effect The side effect\r\n * @returns A reference to the side effect (see the above doc)\r\n */\r\nexport const runEffect = apiFunctionBuilder.build((effect) => {\r\n    const sideEffect = new SideEffect(effect, globalTrackingContext, globalEffectScheduler);\r\n    sideEffect.run();\r\n    return sideEffect;\r\n});\r\n/**\r\n * A utility decorator that auto-wraps instance variables in atoms, and overrides the set and get methods\r\n * such that they write/read to the atom.\r\n */\r\nexport const state = apiFunctionBuilder.build(() => {\r\n    const registry = new WeakMap();\r\n    return function (target, propertyKey) {\r\n        Object.defineProperty(target, propertyKey, {\r\n            set: function (newVal) {\r\n                if (!registry.has(this)) {\r\n                    registry.set(this, new MutableAtom(newVal, globalTrackingContext));\r\n                }\r\n                else {\r\n                    registry.get(this).set(newVal);\r\n                }\r\n            },\r\n            get: function () {\r\n                return registry.get(this).get();\r\n            },\r\n        });\r\n    };\r\n});\r\n/**\r\n * A utility decorator that auto-wraps methods in derived atoms.\r\n */\r\nexport const derivedState = apiFunctionBuilder.build(() => {\r\n    return (target, propertyKey, descriptor) => {\r\n        const registry = new WeakMap();\r\n        const originalFn = descriptor.value;\r\n        descriptor.value = function (...args) {\r\n            if (!registry.has(this)) {\r\n                registry.set(this, new DerivedAtom(() => {\r\n                    return originalFn.apply(this, args);\r\n                }, globalTrackingContext));\r\n            }\r\n            return registry.get(this).get();\r\n        };\r\n    };\r\n});\r\n/**\r\n * Executes a callback that is not tracked by external contexts. I.e. reads made within the callback\r\n * will be made outside any external tracking scopes.\r\n *\r\n * @param job The callback to execute in an untracked context\r\n */\r\nexport const runUntracked = (job) => {\r\n    try {\r\n        globalTrackingContext.enterNewTrackingContext();\r\n        return job();\r\n    }\r\n    finally {\r\n        globalTrackingContext.exitCurrentTrackingContext();\r\n    }\r\n};\r\n/**\r\n * Executes a job in a batched context, such that all eager side effects will be run after the job returns.\r\n * This is typically useful if you have an invalid intermediate state that is invalid and should never be used\r\n * in any effects.\r\n *\r\n * @param job The job to be run in a batched state, with all effects running after the job completes.\r\n */\r\nexport const runBatched = (job) => {\r\n    try {\r\n        globalEffectScheduler.enterBatchState();\r\n        job();\r\n    }\r\n    finally {\r\n        globalEffectScheduler.exitBatchedState();\r\n    }\r\n};\r\n//# sourceMappingURL=api.js.map","references":["/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/atom.interface.ts","/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/atom.ts","/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/atom.interface.ts","/Users/eric.rodriguez/personal/dev/recoil/node_modules/shared/lib/index.ts","/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/context.ts","/Users/eric.rodriguez/personal/dev/recoil/packages/atom/lib/effect_scheduler.ts"],"map":"{\"version\":3,\"file\":\"api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../atom/lib/api.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/context/node_modules/.cache/rollup-plugin-typescript2/placeholder/packages/atom/lib/api.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"api.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../atom/lib/api.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAOhE,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAc5C;;GAEG;AACH,oBAAY,iBAAiB,CAAC,CAAC,SAAS,QAAQ,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;AA4FjE;;;;;GAKG;AACH,eAAO,MAAM,iBAAiB,qEAG3B,IAEF,CAAC;AAEF;;;;;GAKG;AACH,eAAO,MAAM,mBAAmB,qEAG7B,IAEF,CAAC;AAEF,oBAAY,mBAAmB,CAAC,CAAC,IAAI,CACnC,KAAK,EAAE,MAAM,OAAO,CAAC,CAAC,CAAC,KACpB,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;AAG1B;;;;;;;;;GASG;AACH,eAAO,MAAM,UAAU,6DAoCtB,CAAC;AAEF,oBAAY,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC;AAEpE;;;;;GAKG;AACH,eAAO,MAAM,WAAW,kCAIvB,CAAC;AAEF,oBAAY,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;AAExE;;;;;;;;;;;;;;;GAeG;AACH,eAAO,MAAM,WAAW,wCACe,OAAO,aAO7C,CAAC;AAEF,oBAAY,kBAAkB,GAAG,CAAC,MAAM,EAAE,QAAQ,KAAK,cAAc,CAAC;AAEtE;;;;;;;;;;;;;;;GAeG;AACH,eAAO,MAAM,SAAS,EAAE,kBAYvB,CAAC;AAEF;;;GAGG;AACH,eAAO,MAAM,KAAK,QAAgC,IAAI,GAAG,GAoBvD,CAAC;AAEH;;GAEG;AACH,eAAO,MAAM,YAAY,QAAgC,MAAM,GAAG,GAqBhE,CAAC;AAEH;;;;;GAKG;AACH,eAAO,MAAM,YAAY,4BAOxB,CAAC;AAEF;;;;;;GAMG;AACH,eAAO,MAAM,UAAU,QAAS,QAAQ,KAAG,IAO1C,CAAC\"}"},"dts":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/context/node_modules/.cache/rollup-plugin-typescript2/placeholder/packages/atom/lib/api.d.ts","writeByteOrderMark":false,"text":"import { IMutableAtom, ISideEffectRef } from \"./atom.interface\";\r\nimport { IAtom } from \"./atom.interface\";\r\nimport { Producer, Runnable } from \"shared\";\r\n/**\r\n * A generic higher order function\r\n */\r\nexport declare type FunctionDecorator<F extends Function> = (fn: F) => F;\r\n/**\r\n * Registers a runtime decorator against one of the public factory methods exposed by this module.\r\n *\r\n * @param apiFn The exposed function\r\n * @param decorator The higher order decorator to be applied for all subsequent calls of the apiFn\r\n */\r\nexport declare const registerDecorator: <F extends Function>(apiFn: F, decorator: FunctionDecorator<F>) => void;\r\n/**\r\n * De-registers decorators that have been applied to the provided apiFn (i.e. createState etc)\r\n *\r\n * @param apiFn The exposed function\r\n * @param decorator The higher order decorator to be removed\r\n */\r\nexport declare const deregisterDecorator: <F extends Function>(apiFn: F, decorator: FunctionDecorator<F>) => void;\r\nexport declare type FetchStateSignature<T> = (fetch: () => Promise<T>) => IAtom<T | undefined>;\r\n/**\r\n * A lightweight primitive that allows state to be fetched asynchronously and written to a reactive atom. Before\r\n * resolving, the returned atom will have an undefined value.\r\n *\r\n * @param producer A synchronous builder for an asynchronous value. It is important that all dependencies that invalidate\r\n *                 the returned state are read synchronously (i.e. before any async execution). You should think of this\r\n *                 as a synchronous factory that produces a promise, with this factory being re-run every time its dependencies\r\n *                 change.\r\n * @returns A maybe atom containing the fetched state (or undefined in the instance when the state is being fetched)\r\n */\r\nexport declare const fetchState: <T>(producer: Producer<Promise<T>>) => IAtom<T | undefined>;\r\nexport declare type CreateStateSignature<T> = (value: T) => IMutableAtom<T>;\r\n/**\r\n * A factory method for a mutable atom instance.\r\n *\r\n * @param value The value to be stored in the atom.\r\n * @returns The atom\r\n */\r\nexport declare const createState: <T>(value: T) => IMutableAtom<T>;\r\nexport declare type DeriveStateSignature<T> = (derivation: () => T) => IAtom<T>;\r\n/**\r\n * A factory method for a derived state.\r\n *\r\n * The returned atom is dirtied whenever any atomic dependencies used within the\r\n * derivation are dirtied. Evaluation can either be lazy or eager, depending on\r\n * the effects registered against it.\r\n *\r\n * Which computations to wrap in cached derivations should be considered carefully, ideally through profiling. This\r\n * is because all writes to mutable atoms have a linear time complexity on the depth of the dependency DAG. Hence,\r\n * they should be used as tracked cache (memoization) primitive.\r\n *\r\n * @param deriveValue A synchronous factory for the state\r\n * @param cache Determines if the returned Atom is a skip connection in the DAG or an actual node.\r\n * @returns An atom containing the derived state, which automatically tracks the dependencies that were used to\r\n *          create it\r\n */\r\nexport declare const deriveState: <T>(deriveValue: Producer<T>, cache?: boolean) => IAtom<T>;\r\nexport declare type RunEffectSignature = (effect: Runnable) => ISideEffectRef;\r\n/**\r\n * A factory method for a tracked side effect\r\n *\r\n * The effect will be eagerly run once, and again any time any of its dependencies become dirty.\r\n *\r\n * It is important that this side effect is state-free, i.e. writes to atoms should be done with extreme\r\n * caution, as they can easily create reactive loops that are extremely difficult to find.\r\n *\r\n * As this is effectively a leaf in the dependency DAG, a reference to the side effect is returned that\r\n * should be managed by the caller. It provides lifecycle methods for the effect and also ensures that the\r\n * effect is not garbage collected. Despite this, it is recommended that this function should be decorated with\r\n * auto-scoping logic that handles reference management instead of doing it ad-hoc.\r\n *\r\n * @param effect The side effect\r\n * @returns A reference to the side effect (see the above doc)\r\n */\r\nexport declare const runEffect: RunEffectSignature;\r\n/**\r\n * A utility decorator that auto-wraps instance variables in atoms, and overrides the set and get methods\r\n * such that they write/read to the atom.\r\n */\r\nexport declare const state: () => void | any;\r\n/**\r\n * A utility decorator that auto-wraps methods in derived atoms.\r\n */\r\nexport declare const derivedState: () => string | any;\r\n/**\r\n * Executes a callback that is not tracked by external contexts. I.e. reads made within the callback\r\n * will be made outside any external tracking scopes.\r\n *\r\n * @param job The callback to execute in an untracked context\r\n */\r\nexport declare const runUntracked: <T>(job: Producer<T>) => T;\r\n/**\r\n * Executes a job in a batched context, such that all eager side effects will be run after the job returns.\r\n * This is typically useful if you have an invalid intermediate state that is invalid and should never be used\r\n * in any effects.\r\n *\r\n * @param job The job to be run in a batched state, with all effects running after the job completes.\r\n */\r\nexport declare const runBatched: (job: Runnable) => void;\r\n//# sourceMappingURL=api.d.ts.map"}}
