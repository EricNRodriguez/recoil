{"code":"import { nullOrUndefined } from \"shared\";\r\nconst frag = document.createDocumentFragment();\r\n// heavily inspired by both\r\n// https://github.com/ryansolid/dom-expressions/blob/07f693e7a60a487c07966c277f89a7c00c96c72b/packages/dom-expressions/src/reconcile.js\r\n// and\r\n// https://github.com/WebReflection/udomdiff/blob/8923d4fac63a40c72006a46eb0af7bfb5fdef282/index.js\r\nexport const reconcileNodeArrays = ({ parent, currentNodes, newNodes, }) => {\r\n    let curLeft = 0;\r\n    let curRight = currentNodes.length;\r\n    let newLeft = 0;\r\n    let newRight = newNodes.length;\r\n    let newNodesIndex = new Map(newNodes.map((node, idx) => [node, idx]));\r\n    const appendRestOfNewNodes = () => {\r\n        let nextNodeAnchor = null;\r\n        if (newRight < newNodes.length) {\r\n            if (newLeft > 0) {\r\n                nextNodeAnchor = newNodes[newLeft - 1].nextSibling;\r\n            }\r\n            else {\r\n                // when `currentNodes` is the common suffix\r\n                nextNodeAnchor = newNodes[newRight];\r\n            }\r\n        }\r\n        else {\r\n            nextNodeAnchor = currentNodes[currentNodes.length - 1]?.nextSibling;\r\n        }\r\n        for (let i = newLeft; i < newRight; ++i) {\r\n            frag.append(newNodes[i]);\r\n        }\r\n        newLeft = newRight;\r\n        parent.insertBefore(frag, nextNodeAnchor);\r\n    };\r\n    const removeRestOfCurrentNodes = () => {\r\n        currentNodes.slice(curLeft, curRight).forEach((node) => {\r\n            node.remove();\r\n            ++curLeft;\r\n        });\r\n    };\r\n    const fallbackAndMapContiguousChunk = () => {\r\n        if (newNodesIndex.has(currentNodes[curLeft])) {\r\n            // We have a node that is in both `currentNodes` and `newNodes`, however has changed index\r\n            const curStartIndexInNew = newNodesIndex.get(currentNodes[curLeft]);\r\n            // SC\r\n            if (curStartIndexInNew < newLeft || curStartIndexInNew >= newRight) {\r\n                return;\r\n            }\r\n            // We find the largest common contiguous subsequence of nodes in `currentNodes` starting at curLeft,\r\n            // that are also contiguous in `newNodes`, starting at `curIIndexInNew`\r\n            let contigSubsequenceLen = 1;\r\n            for (let i = curLeft + 1; i < curRight && i < newRight; ++i) {\r\n                const curIIndexInNew = newNodesIndex.get(currentNodes[i]);\r\n                if (nullOrUndefined(curIIndexInNew) ||\r\n                    curIIndexInNew - contigSubsequenceLen !== curStartIndexInNew) {\r\n                    break;\r\n                }\r\n                contigSubsequenceLen++;\r\n            }\r\n            if (contigSubsequenceLen > curStartIndexInNew - newLeft) {\r\n                const node = currentNodes[curLeft];\r\n                while (newLeft < curStartIndexInNew) {\r\n                    parent.insertBefore(newNodes[newLeft], node);\r\n                    ++newLeft;\r\n                }\r\n            }\r\n            else {\r\n                parent.replaceChild(newNodes[newLeft], currentNodes[curLeft]);\r\n                ++curLeft;\r\n                ++newLeft;\r\n            }\r\n        }\r\n        else {\r\n            currentNodes[curLeft].remove();\r\n            ++curLeft;\r\n        }\r\n    };\r\n    const clipPrefix = () => {\r\n        while (curLeft < curRight &&\r\n            newLeft < newRight &&\r\n            currentNodes[curLeft] === newNodes[newLeft]) {\r\n            ++curLeft;\r\n            ++newLeft;\r\n        }\r\n    };\r\n    const clipSuffix = () => {\r\n        while (curRight > curLeft &&\r\n            newRight > newLeft &&\r\n            currentNodes[curRight - 1] === newNodes[newRight - 1]) {\r\n            --curRight;\r\n            --newRight;\r\n        }\r\n    };\r\n    while (curLeft < curRight || newLeft < newRight) {\r\n        clipPrefix();\r\n        clipSuffix();\r\n        if (curLeft === curRight) {\r\n            appendRestOfNewNodes();\r\n        }\r\n        else if (newLeft === newRight) {\r\n            removeRestOfCurrentNodes();\r\n        }\r\n        else {\r\n            fallbackAndMapContiguousChunk();\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=reconcile.js.map","references":["/Users/eric.rodriguez/personal/dev/recoil/packages/shared/lib/index.ts"],"map":"{\"version\":3,\"file\":\"reconcile.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../dom/lib/reconcile.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/dom-dsl/node_modules/.cache/rollup-plugin-typescript2/placeholder/dom/lib/reconcile.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"reconcile.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../dom/lib/reconcile.ts\"],\"names\":[],\"mappings\":\"AAEA,oBAAY,uBAAuB,GAAG;IACpC,MAAM,EAAE,IAAI,CAAC;IACb,YAAY,EAAE,IAAI,EAAE,CAAC;IACrB,QAAQ,EAAE,IAAI,EAAE,CAAC;CAClB,CAAC;AAQF,eAAO,MAAM,mBAAmB,wCAI7B,uBAAuB,SAsHzB,CAAC\"}"},"dts":{"name":"/Users/eric.rodriguez/personal/dev/recoil/packages/dom-dsl/node_modules/.cache/rollup-plugin-typescript2/placeholder/dom/lib/reconcile.d.ts","writeByteOrderMark":false,"text":"export declare type ReconcileNodeArraysArgs = {\r\n    parent: Node;\r\n    currentNodes: Node[];\r\n    newNodes: Node[];\r\n};\r\nexport declare const reconcileNodeArrays: ({ parent, currentNodes, newNodes, }: ReconcileNodeArraysArgs) => void;\r\n//# sourceMappingURL=reconcile.d.ts.map"}}
